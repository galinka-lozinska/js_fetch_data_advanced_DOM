{"version":3,"sources":["scripts/main.js"],"names":["BASE_URL","request","url","fetch","then","response","ok","json","getFirstReceivedDetails","phones","Promise","race","map","phone","resolve","id","getAllSuccessfulDetails","allSettled","filter","status","result","value","firstReceived","document","createElement","className","insertAdjacentHTML","JSON","stringify","body","append","allSuccessful","ul","forEach","details","idHeader","key","innerHTML","toUpperCase","li","textContent"],"mappings":";AACA,aAEA,IAAMA,EAAW,mEAEXC,EAAU,WAACC,IAAAA,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACdC,OAAAA,MAASH,GAAAA,OAAAA,GAAWE,OAAAA,EAApB,UACJE,KAAK,SAAAC,GACAA,GAAAA,EAASC,GACJD,OAAAA,EAASE,UAKlBC,EAA0B,WACvBP,OAAAA,IACJG,KAAK,SAAAK,GAAUC,OAAAA,QAAQC,KAAKF,EAAOG,IAClC,SAAAC,GAAS,OAAA,IAAIH,QACX,SAAAI,GAAWA,OAAAA,EAAQb,EAAYY,IAAAA,OAAAA,EAAME,cAIvCC,EAA0B,WACvBf,OAAAA,IACJG,KAAK,SAAAK,GACJC,OAAAA,QAAQO,WAAWR,EAAOG,IACxB,SAAAC,GAAS,OAAA,IAAIH,QACX,SAAAI,GAAWA,OAAAA,EAAQb,EAAYY,IAAAA,OAAAA,EAAME,aAE1CX,KAAK,SAAAK,GAAUA,OAAAA,EAAOS,OACrB,SAAAL,GAASA,MAAiB,cAAjBA,EAAMM,WAChBf,KAAK,SAAAgB,GAAUA,OAAAA,EAAOR,IAAI,SAAAC,GAASA,OAAAA,EAAMQ,WAG9Cb,IACGJ,KAAK,SAAAgB,GACEE,IAAAA,EAAgBC,SAASC,cAAc,OAE7CF,EAAcG,UAAY,iBAE1BH,EAAcI,mBAAmB,aAE1BC,6CAAAA,OAAAA,KAAKC,UAAUR,GAFtB,eAIAG,SAASM,KAAKC,OAAOR,KAGzBN,IACGZ,KAAK,SAAAgB,GACEW,IAAAA,EAAgBR,SAASC,cAAc,OACvCQ,EAAKT,SAASC,cAAc,MAElCO,EAAcL,mBAAmB,aAAjC,yCAIAN,EAAOa,QAAQ,SAAAC,GACPC,IAAAA,EAAWZ,SAASC,cAAc,MAMnC,IAAA,IAAMY,KAJXD,EAASE,UAAmBH,OAAAA,OAAAA,EAAQnB,GAAGuB,cAAvC,SACAH,EAASV,UAAY,YACrBO,EAAGF,OAAOK,GAEQD,EAAS,CACnBK,IAAAA,EAAKhB,SAASC,cAAc,MAElCe,EAAGC,YAAiBJ,GAAAA,OAAAA,EAAST,OAAAA,OAAAA,KAAKC,UAAUM,EAAQE,KACpDJ,EAAGF,OAAOS,MAIdR,EAAcN,UAAY,iBAC1BM,EAAcD,OAAOE,GAErBT,SAASM,KAAKC,OAAOC","file":"main.99bea6f6.js","sourceRoot":"../src","sourcesContent":["/* eslint-disable max-len */\n'use strict';\n\nconst BASE_URL = 'https://mate-academy.github.io/phone-catalogue-static/api/phones';\n\nconst request = (url = '') => {\n  return fetch(`${BASE_URL}${url}.json`)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    });\n};\n\nconst getFirstReceivedDetails = () => {\n  return request()\n    .then(phones => Promise.race(phones.map(\n      phone => new Promise(\n        resolve => resolve(request(`/${phone.id}`))\n      ))));\n};\n\nconst getAllSuccessfulDetails = () => {\n  return request()\n    .then(phones =>\n      Promise.allSettled(phones.map(\n        phone => new Promise(\n          resolve => resolve(request(`/${phone.id}`)\n          )))))\n    .then(phones => phones.filter(\n      phone => phone.status === 'fulfilled'))\n    .then(result => result.map(phone => phone.value));\n};\n\ngetFirstReceivedDetails()\n  .then(result => {\n    const firstReceived = document.createElement('div');\n\n    firstReceived.className = 'first-received';\n\n    firstReceived.insertAdjacentHTML('afterbegin', `\n      <h3>First Received</h3>\n      <p>${JSON.stringify(result)}</p>\n    `);\n    document.body.append(firstReceived);\n  });\n\ngetAllSuccessfulDetails()\n  .then(result => {\n    const allSuccessful = document.createElement('div');\n    const ul = document.createElement('ul');\n\n    allSuccessful.insertAdjacentHTML('afterbegin', `\n      <h3>All Successful</h3>\n    `);\n\n    result.forEach(details => {\n      const idHeader = document.createElement('li');\n\n      idHeader.innerHTML = `<h4>${details.id.toUpperCase()}</h4>`;\n      idHeader.className = 'li-header';\n      ul.append(idHeader);\n\n      for (const key in details) {\n        const li = document.createElement('li');\n\n        li.textContent = `${key} : ${JSON.stringify(details[key])}`;\n        ul.append(li);\n      }\n    });\n\n    allSuccessful.className = 'all-successful';\n    allSuccessful.append(ul);\n\n    document.body.append(allSuccessful);\n  });\n"]}